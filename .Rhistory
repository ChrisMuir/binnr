N <- 100
p <- data.frame(lat=runif(N,-90,90), lon=runif(N,-180,180),lat2=runif(N,-90,90), lon2=runif(N,-180,180) )
f1 <- function() {
sapply(1:nrow(p), function(x) distCosine(c(p$lon[x], p$lat[x]), c(p$lon2[x], p$lat2[x]) ) )
}
pts <- list(p1=p[2:1], p2=p[4:3])
f2 <- function() {
do.call(distCosine, pts)
}
f3 <- function() {
p %>% rowwise() %>% mutate(dist2prev = distCosine(c(lon, lat), c(lon2, lat2)))
}
microbenchmark::microbenchmark(vanilla=f1(), do.call=f2(), dplyr=f3())
19800/371
?distCosine
f2 <- function() {
distCosine([2:1], p[4:3]))
}
f2 <- function() {
distCosine(p[2:1], p[4:3]))
}
f2 <- function() {
distCosine(p[2:1], p[4:3])
}
microbenchmark::microbenchmark(vanilla=f1(), do.call=f2(), dplyr=f3())
p %>% mutate(dist2prev = distCosine(c(lon, lat), c(lon2, lat2)))
p %>% mutate(dist2prev = distCosine(cbind(lon, lat), cbind(lon2, lat2)))
f2 <- function() {
distCosine
}
f3 <- function() {
p %>% mutate(dist2prev = distCosine(cbind(lon, lat), cbind(lon2, lat2)))
}
microbenchmark::microbenchmark(vanilla=f1(), do.call=f2(), dplyr=f3())
f2 <- function() {
do.call(distCosine, pts)
}
f3 <- function() {
p %>% mutate(dist2prev = distCosine(cbind(lon, lat), cbind(lon2, lat2)))
}
microbenchmark::microbenchmark(vanilla=f1(), do.call=f2(), dplyr=f3())
library(rubbish)
library(rubbish)
?bin
library(rubbish)
?bin
megt
mget
?mget
Reduce(function(...) merge(..., by=-), list(mtcars, mtcars, mtcars))
Reduce(function(...) merge(..., by=0), list(mtcars, mtcars, mtcars))
Reduce(function(...) merge(..., by=0), mtcars, mtcars, mtcars)
Reduce(function(...) merge(..., by=0), list(mtcars, mtcars, mtcars))
Reduce(merge, list(mtcars, mtcars, mtcars))
Reduce(functioN(a, b) merge(a, b, by=0), list(mtcars, mtcars, mtcars))
Reduce(function(a, b) merge(a, b, by=0), list(mtcars, mtcars, mtcars))
Reduce(function(...) merge(..., by=0, all=T), list(mtcars, mtcars, mtcars))
minsplit <- c(50, 100)
minbucket <- c(20, 30)
maxdepth <- c(3, 5)
mincriterion <- c(0.95, 0.99)
params <- expand.grid(minsplit, minbucket, maxdepth, mincriterion)
params
params <- expand.grid(minsplit=minsplit, minbucket=minbuket, maxdepth=maxdepth, mincriterion=mincriterion)
params <- expand.grid(minsplit=minsplit, minbucket=minbucket, maxdepth=maxdepth, mincriterion=mincriterion)
params
params <- expand.grid(
minsplit=minsplit,
minbucket=minbucket,
maxdepth=maxdepth,
mincriterion=mincriterion)
tcs <- apply(perams, 1, function(x){
tc <- ctree_control(
minsplit  = x[1],
minbucket = x[2],
maxdepth  = x[3],
mincriterion = x[4]
)
return(tc)
})
tcs <- apply(params, 1, function(x){
tc <- ctree_control(
minsplit  = x[1],
minbucket = x[2],
maxdepth  = x[3],
mincriterion = x[4]
)
return(tc)
})
library(party)
do.call(ctree_control, params)
tcs <- lapply(split(params, seq.int(nrow(params))), functio(args) do.call(ctree_control, args))
tcs <- lapply(split(params, 1:nrow(params)), function(args) do.call(ctree_control, args))
tcs
params <- expand.grid(
minsplit = c(50, 100),
minbucket = c(20, 30),
maxdepth = c(3, 5),
mincriterion = c(0.95, 0.99))
tcs <- lapply(split(params, 1:nrow(params)), ctree_control)
tcs <- lapply(split(params, 1:nrow(params)), function(args) do.call(ctree_control, args))
titanic
dts <- lapply(tcs, function(ctrl) ctree(factor(Survived)~., titanic, controls = ctrl))
dts
dts[[1]]
?ctree
mod
mod$variables$Age$help()
mod$variables$Age$help("collapse")
Continuous$help("collapse")
library(rubbish)
Continuous$help("collapse")
sessionInfo()
roxygen2::roxygenize(".")
library(roxygen2)
install.packages("roxygen2")
install.packages("roxygen2")
packageVersion("roxygen2")
library(rubbish)
Continuous$help("collapse")
?Continuous$collapse
?Continuous$collapse()
Continuous$collapse
Continuous$collapse()
mod <- rubbish:::bin(data=fp3.dev.final[s,], y=fp3.dev.final$nd_fraud[s])
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$variables$Age$collapse
?mod$variables$Age$collapse
mod$variables$Age$help
Continuous
Continuous$help("collapse")
Continuous$help("expand")
?rubbish
??rubbish
?Continuous_collapse
library(rubbish)
?Continuous_factorize
library(rubbish)
?Continuous_factorize
library(rubbish)
library(rubbish)
?Continuous_factorize
library(rubbish)
mod <- rubbish:::bin(data=fp3.dev.final[s,], y=fp3.dev.final$nd_fraud[s])
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod
mod$predict()
mod$predict(type="woe")
mod$variables$Agepredict(type="woe")
mod$variables$Agepredict()
traceback()
mod$variables$Age$predict()
mod$variables$Age$predict(head(titanic$Age))
head(mod$variables$Age$predict())
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod
mod$predict(type="woe")
mod$predict()
traceback()
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$predict()
mod$variables$Pclass$predict()
mod$variables$Age$predict()
mod$predict()
traceback()
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod
mod$predict()
traceback()
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$predict()
mod$predict(type="woe")
mod$adjust()
mod$predict(type="woe")
mod$predict(type="woe", keep=TRUE)
mod$fit("model 1")
mod
mod$predict()
mod$select("HEAD")
mod$predict()
mod$variables$Age$gen_code_sas()
cat(mod$variables$Age$gen_code_sas())
cat(mod$variables$Age$gen_code_sas(), sep="\n")
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$predict()
mod$variables$Age$gen_code_sas
mod$variables$Age$gen_code_sas()
cat(mod$variables$Age$gen_code_sas())
cat(mod$variables$Pclass$gen_code_sas())
?Continuous_gen_code_sas
library(isofor)
data(titanic)
titanic$Age[is.na(titanic$Age)] <- median(titanic$Age, na.rm=TRUE)
mod <- iForest(titanic)
nodes <- predict(mod, sparse=TRUE)
nodes <- predict(mod, titanic, sparse=TRUE)
nodes
t(nodes)
library(Matrix)
t(nodes)
t_nodes <- t(nodes)
dim(t_nodes)
head(t_nodes)
dim(t_nodes)
perms <- replicate(10, sample.int(nrow(t_nodes)))
pers
perms
perms <- replicate(10, sample.int(nrow(t_nodes)), simplify = FALSE)
perms
t_nodes[perms,]
t_nodes[perms[[1]],]
t_nodes[perms[[1]],1:5]
rows(t_nodes[perms[[1]],1:5])
row(t_nodes[perms[[1]],1:5])
row(t_nodes[perms[[1]],1:5] == 1)
which(t_nodes[perms[[1]],1:5] == 1)
apply(t_nodes[perms[[1]],1:5], 1, function(x) which.min)
apply(t_nodes[perms[[1]],1:5], 1, which.min)
apply(t_nodes[perms[[1]],1:5], 2, which.min)
t_nodes[perms[[1]],1:5]
apply(t_nodes[perms[[1]],1:5], 2, which.max)
apply(t_nodes[perms[[1]],], 2, which.max)
perms[[1]][apply(t_nodes[perms[[1]],], 2, which.max)]
set.seed(100)
perms <- replicate(10, sample.int(nrow(t_nodes)), simplify = FALSE)
hashes <- lapply(perms, function(i) {
i[apply(t_nodes[i,], 2, which.max)]
})
hashes
do.call(cbind, hashes)
sigs <- do.call(cbind, hashes)
head(sigs)
table(sigs[,1])
table(sigs[,2])
titanicwhich(sigs[,2] == 6553)
titanic[which(sigs[,2] == 6553),]
x <- titanic
x$Age <- cut(x$Age, 10)
x$Fare <- cut(x$Fare, 10)
x
x$SibSp <- cut(x$SibSp, 5)
x$Parch <- cut(x$Fare, 5)
x$Parch <- cut(x$Parch, 5)
x
mm <- model.marix(Survived~., x)
mm <- model.matrix(Survived~., x)
mm
mm <- model.matrix(Survived~.-1, x)
dim(mm)
X <- t(mm)
perms <- replicate(10, sample.int(nrow(X)), simplify = FALSE)
dim(X)
hashes <- lapply(perms, function(i) {
i[apply(X[i,], 2, which.max)]
})
hashes
sigs <- do.call(cbind, hashes)
table(sigs[,1])
table(sigs[[,1]][1])
table(sigsp,1)
table(sigs[,1])
titanic(sigs[,1])
titanic(sigs[,1]==14,)
titanic[sigs[,1]==14,]
titanic[sigs[,1]==30,]
dim(sigs)
sigs <- do.call(rbind, hashes)
dun(sigs)
dim(sigs)
set.seed(100)
perms <- replicate(100, sample.int(nrow(X)), simplify = FALSE)
hashes <- lapply(perms, function(i) {
i[apply(X[i,], 2, which.max)]
})
sigs <- do.call(rbind, hashes)
sigs
sigs[,1:10]
M <- do.call(rbind, hashes)
dim(M)
split(1:100, seq(1:10, each=10))
split(1:100, rep(1:10, each=10))
lapply(split(1:100, rep(1:10, each=10)), function(i) M[i,])
bands <- lapply(split(1:100, rep(1:10, each=10)), function(i) M[i,])
bands
dim(bands[[1]])
library(digest)
digest::sha1(bands[[1]][,1])
dim(bands[[1]][,1])
dim(bands[[1]])
hashes <- lapply(bands, function(band) apply(band, 2, sha1))
hashes
table(hashes[[1]])
titanic[hashes[[1]] == "3f671de8c5f707cc6f414d924f1cad106a53e529",]
titanic[hashes[[1]] == "fdae17cd8bfe473647339a97e81ddd614e25f116",]
titanic[hashes[[1]] == "cf342e3776f91205b6a33de642ffef917bc869cb",]
titanic[hashes[[1]] == "c3ca12da04fc3e505d38bb5d9a885623622de62e",]
titanic[hashes[[1]] == "df66101f5a5ff6421c20b2557bd129a4a246fe12",]
titanic[hashes[[1]] == "d669d42d9a496ee134ca22057a206e6f46e2b6b7",]
dim(M)
r <- nrow(M)/b
b <- 10
b <- 5
r <- nrow(M)/b
r
bands <- lapply(split(1:100, rep(1:b, each=r)), function(i) M[i,])
bands[[1]]
hashes <- lapply(bands, function(band) apply(band, 2, sha1))
table(hashes[[1]])
titanic[hashes[[1]] == "706e9a1b43240aae037ca740ac6628851a91b743",]
hashes
q <- function(i) lapply(hashes, "[", i)
q(1)
data(titanic)
x <- titanic
x$Age <- cut(x$Age, 10)
x$Fare <- cut(x$Fare, 10)
x$SibSp <- cut(x$SibSp, 5)
x$Parch <- cut(x$Parch, 5)
mm <- model.matrix(Survived~.-1, x)
X <- t(mm)
set.seed(100)
perms <- replicate(100, sample.int(nrow(X)), simplify = FALSE)
hashes <- lapply(perms, function(i) {
i[apply(X[i,], 2, which.max)]
})
M <- do.call(rbind, hashes)
b <- 5
r <- nrow(M)/b
bands <- lapply(split(1:100, rep(1:b, each=r)), function(i) M[i,])
q <- function(i) lapply(hashes, "[", i)
q
hashes <- lapply(bands, function(band) apply(band, 2, sha1))
hashes <- lapply(bands, function(band) apply(band, 2, digest::sha1))
q <- function(i) lapply(hashes, "[", i)
q
q(1)
source('~/.active-rstudio-document')
f
f(1)
length(hashes)
b <- 20
r <- nrow(M)/b
bands <- lapply(split(1:100, rep(1:b, each=r)), function(i) M[i,])
hashes <- lapply(bands, function(band) apply(band, 2, digest::sha1))
## get candidates of one instance
f <- function(i) lapply(hashes, "[", i)
f(1)
f(10)
nn <- function(h) mapply(function(hh, h) which(hh) == h, hashes, h)
nn(f(1))
nn <- function(h) mapply(function(hh, h) which(hh == h), hashes, h)
nn(f(1))
nn(f(2))
nn(f(1))
unlist(nn(f(1)))
unique9unlist(nn(f(1))))
unique9unlist(nn(f(1)))
unique(unlist(nn(f(1))))
unique(unlist(nn(f(2))))
unique(unlist(nn(f(3))))
unique(unlist(nn(f(4))))
unique(unlist(nn(f(5))))
unique(unlist(nn(f(6))))
titanic[unique(unlist(nn(f(6)))),[]
titanic[unique(unlist(nn(f(6)))),]
b <- 25
r <- nrow(M)/b
bands <- lapply(split(1:100, rep(1:b, each=r)), function(i) M[i,])
hashes <- lapply(bands, function(band) apply(band, 2, digest::sha1))
## get candidates of one instance
f <- function(i) lapply(hashes, "[", i)
## get candidates
nn <- function(h) mapply(function(hh, h) which(hh == h), hashes, h)
unique(unlist(nn(f(1))))
unique(unlist(nn(f(2))))
source('~/.active-rstudio-document', echo=TRUE)
unique(unlist(nn(f(1))))
unique(nn(f(1)))
f(1)
length(hashes)
nn <- function(h) mapply(function(hh, h) which(hh == h), hashes, h)
nn(f(1))
f
f(1)
hashes
nn <- function(h) mapply(function(hh, h) which(hh == h), hashes, h, SIMPLIFY = F)
nn
nn(f(1))
unique(unlist(nn(f(1))))
titanic[unique(unlist(nn(f(1)))),]
titanic[unique(unlist(nn(f(2)))),]
titanic[unique(unlist(nn(f(3)))),]
titanic[unique(unlist(nn(f(4)))),]
titanic[unique(unlist(nn(f(5)))),]
titanic[unique(unlist(nn(f(6)))),]
titanic[unique(unlist(nn(f(7)))),]
titanic[unique(unlist(nn(f(8)))),]
perms <- replicate(200, sample.int(nrow(X)), simplify = FALSE)
hashes <- lapply(perms, function(i) {
i[apply(X[i,], 2, which.max)]
})
M <- do.call(rbind, hashes)
b <- 5
r <- nrow(M)/b
bands <- lapply(split(seq.int(nrow(perms)), rep(1:b, each=r)), function(i) M[i,])
hashes <- lapply(bands, function(band) apply(band, 2, digest::sha1))
titanic[unique(unlist(nn(f(7)))),]
titanic[unique(unlist(nn(f(1)))),]
hashes
head(bands)
head(bands[[1]])
head(bands[[1]][,1:10])
dim(bands[[1]])
dim(bands[[2]])
dim(M)
head(M)
b <- 5
r <- nrow(M)/b
seq.int(nrow(perms))
nrow(perms)
bands <- lapply(split(seq.int(length(perms)), rep(1:b, each=r)), function(i) M[i,])
hashes <- lapply(bands, function(band) apply(band, 2, digest::sha1))
titanic[unique(unlist(nn(f(7)))),]
titanic[unique(unlist(nn(f(1)))),]
titanic[unique(unlist(nn(f(3)))),]
titanic[unique(unlist(nn(f(4)))),]
titanic[unique(unlist(nn(f(5)))),]
titanic[unique(unlist(nn(f(6)))),]
titanic[unique(unlist(nn(f(100)))),]
lens <- sapply(1:891, function(i) unique(unlist(nn(f(i)))))
lengths(lens)
hist(lengths(lens))
mod
library(rubbish)
data(titanic)
titanic$Embarked[titanic$Embarked == ""] <- "C"
titanic$Embarked <- droplevels(titanic$Embarked)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
?Discrete_gen_code_sas
library(rubbish)
?Discrete_gen_code_sas
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$fit("model 1")
p <- mod$predict()
hist(p)
pROC::roc(titanic$Survived, p[,1])
im <- mod$get_inmodel()
im
to_drop <- mod$get_inmodel(invert=TRUE)
to_drop
mod$drop(to_drop)
mod$dropped
mod$status
mod
mod$fit("model 2")
mod
mod$dropped
mod$inmodel
mod$compare("model 1", "model 2")
mod$compare("model 1", "model 2")
?print
print
print(1)
x = print(1)
x
library(rubbish)
mod
mod$adjust()
mod$variables$Sex$set_cutpoints(1, 2, 3)
mod$variables$Sex$set_cutpoints(c(1,2,3))
mod$variables$Sex
(function() return())
(function() return())()
(function() invisible(return()))()
(function() invisible())()
invisible()
return(invisible())
(function() return(invisible()))()
is(mod$variables$Age, "Continuous")
is(mod$variables$Sex, "Continuous")
mod$variables$Sex$set_cutpoints(c(1,2,3))
mod
mod$variables$Embarked$set_cutpoints(c(1,2,3))
mod$variables$Embarked
mod$variables$Embarked$reset()
mod$variables$Age$reset()
mod$variables$Age$perf$bin(b=mod$variables$Age)
mod$variables$Age$perf$bin(b=mod$variables$Age, mod$variables$Age$args)
mod$variables$Age$args
mod$variables$Age$perf$bin
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$variables$Sex$reset()
mod$variables$Sex$set_cutpoints(c(1,2,3))
mod$variables$Sex
mod$variables$Sex - 1:2
mod$variables$Sex
library(rubbish)
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2, exceptions=-1)
mod$adjust()
mod$adjust()
mod <- rubbish:::bin(data=titanic, y=titanic$Survived, mono=2)
mod$adjust()
mod$variables$Age$mono(0)
mod$variables$Age
mod$variables$Age$plot()
